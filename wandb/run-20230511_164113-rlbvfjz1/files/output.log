COST SHAPE IS  torch.Size([1000, 10, 3])
BEFORE NORMALIZATION:
tensor([[[23.4094, 14.3042, 16.2482],
         [33.0775, 75.7954, 16.5362],
         [18.6325, 29.3989, 30.9035],
         ...,
         [53.7684, 11.4915, 28.9294],
         [25.7313, 57.1294, 29.6822],
         [29.3691, 44.8428, 21.6222]],
        [[12.9854, 13.1646, 14.9394],
         [13.0476, 19.0343, 10.7561],
         [12.9063, 20.8682, 27.1604],
         ...,
         [42.8600,  9.3668, 15.4117],
         [14.3699, 16.5630, 15.0757],
         [15.4229, 18.5237, 14.5877]],
        [[12.0719, 13.0300, 14.7849],
         [11.6284, 16.0417, 10.1984],
         [12.3328, 20.0014, 26.7298],
         ...,
         [41.6737,  9.1328, 14.2560],
         [13.3701, 14.2094, 13.8630],
         [14.2410, 16.6034, 13.8941]],
        ...,
        [[11.0268, 12.8648, 14.5954],
         [10.0796, 12.9731,  9.5463],
         [11.6563, 18.9754, 26.2048],
         ...,
         [40.2468,  8.8503, 12.9412],
         [12.2253, 11.7478, 12.4925],
         [12.8991, 14.4945, 13.0788]],
        [[13.8901, 13.2901, 15.0835],
         [14.5111, 22.2905, 11.2980],
         [13.4595, 21.7018, 27.5642],
         ...,
         [43.9852,  9.5882, 16.5618],
         [15.3592, 19.0807, 16.2893],
         [16.6010, 20.4932, 15.2588]],
        [[16.1157, 13.5713, 15.4064],
         [18.3480, 31.5836, 12.5923],
         [14.7654, 23.6611, 28.4764],
         ...,
         [46.5737, 10.0955, 19.4124],
         [17.7900, 26.0736, 19.3242],
         [19.5289, 25.6119, 16.8509]]], device='cuda:0', dtype=torch.float64,
       grad_fn=<CatBackward0>)
Traceback (most recent call last):
  File "/home/abdelmajid/workdir/cost-aware-bo/main.py", line 61, in <module>
    bo_trial(trial_number=trial, acqf=args.acqf, wandb=wandb, params=params)
  File "/home/abdelmajid/workdir/cost-aware-bo/single_trial.py", line 62, in bo_trial
    new_x, n_memoised, E_c, E_inv_c, y_pred = bo_iteration(X, Y, C, bounds=bounds, acqf_str=acqf, decay=eta, iter=iteration, params=params)
  File "/home/abdelmajid/workdir/cost-aware-bo/single_iteration.py", line 72, in bo_iteration
    new_x, n_memoised = optimize_acqf_by_mem(acqf=acqf, acqf_str=acqf_str, bounds=norm_bounds, iter=iter, prefix_pool=prefix_pool, seed=params['rand_seed'])
  File "/home/abdelmajid/workdir/cost-aware-bo/optimize_mem_acqf.py", line 26, in optimize_acqf_by_mem
    new_candidate, acqf_val = optimize_acqf(acq_function=acqf, acq_type=acqf_str, delta=pref_stages, curr_iter=iter, bounds=bounds, q=1, num_restarts=10, raw_samples=512, options={'seed': seed})
  File "/home/abdelmajid/workdir/cost-aware-bo/optimizer/optimize_acqf_funcs.py", line 401, in optimize_acqf
    return _optimize_acqf(opt_acqf_inputs)
  File "/home/abdelmajid/miniconda3/envs/tuun/lib/python3.10/site-packages/botorch/optim/optimize.py", line 554, in _optimize_acqf
    return _optimize_acqf_batch(
  File "/home/abdelmajid/workdir/cost-aware-bo/optimizer/optimize_acqf_funcs.py", line 500, in _optimize_acqf_batch
    batch_candidates, batch_acq_values, ws = _optimize_batch_candidates(timeout_sec)
  File "/home/abdelmajid/workdir/cost-aware-bo/optimizer/optimize_acqf_funcs.py", line 483, in _optimize_batch_candidates
    ) = opt_inputs.gen_candidates(
  File "/home/abdelmajid/workdir/cost-aware-bo/optimizer/optimize_acqf_funcs.py", line 709, in gen_candidates_scipy
    res = minimize_with_timeout(
  File "/home/abdelmajid/miniconda3/envs/tuun/lib/python3.10/site-packages/botorch/optim/utils/timeout.py", line 80, in minimize_with_timeout
    return optimize.minimize(
  File "/home/abdelmajid/miniconda3/envs/tuun/lib/python3.10/site-packages/scipy/optimize/_minimize.py", line 696, in minimize
    res = _minimize_lbfgsb(fun, x0, args, jac, bounds,
  File "/home/abdelmajid/miniconda3/envs/tuun/lib/python3.10/site-packages/scipy/optimize/_lbfgsb_py.py", line 305, in _minimize_lbfgsb
    sf = _prepare_scalar_function(fun, x0, jac=jac, args=args, epsilon=eps,
  File "/home/abdelmajid/miniconda3/envs/tuun/lib/python3.10/site-packages/scipy/optimize/_optimize.py", line 332, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/abdelmajid/miniconda3/envs/tuun/lib/python3.10/site-packages/scipy/optimize/_differentiable_functions.py", line 158, in __init__
    self._update_fun()
  File "/home/abdelmajid/miniconda3/envs/tuun/lib/python3.10/site-packages/scipy/optimize/_differentiable_functions.py", line 251, in _update_fun
    self._update_fun_impl()
  File "/home/abdelmajid/miniconda3/envs/tuun/lib/python3.10/site-packages/scipy/optimize/_differentiable_functions.py", line 155, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/abdelmajid/miniconda3/envs/tuun/lib/python3.10/site-packages/scipy/optimize/_differentiable_functions.py", line 137, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/abdelmajid/miniconda3/envs/tuun/lib/python3.10/site-packages/scipy/optimize/_optimize.py", line 76, in __call__
    self._compute_if_needed(x, *args)
  File "/home/abdelmajid/miniconda3/envs/tuun/lib/python3.10/site-packages/scipy/optimize/_optimize.py", line 70, in _compute_if_needed
    fg = self.fun(x, *args)
  File "/home/abdelmajid/workdir/cost-aware-bo/optimizer/optimize_acqf_funcs.py", line 667, in f_np_wrapper
    loss = f(X_fix).sum()
  File "/home/abdelmajid/workdir/cost-aware-bo/optimizer/optimize_acqf_funcs.py", line 707, in f
    return -acquisition_function(x) if 'EIPU' not in acq_type else -acquisition_function(x, delta, curr_iter)
  File "/home/abdelmajid/miniconda3/envs/tuun/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/abdelmajid/miniconda3/envs/tuun/lib/python3.10/site-packages/botorch/utils/transforms.py", line 287, in decorated
    output = method(acqf, X, *args, **kwargs)
  File "/home/abdelmajid/workdir/cost-aware-bo/EEIPU/EIPUVariants.py", line 155, in forward
    inv_cost =  self.compute_expected_inverse_cost(X, delta=delta)
  File "/home/abdelmajid/workdir/cost-aware-bo/EEIPU/EIPUVariants.py", line 101, in compute_expected_inverse_cost
    for stage in range(len(self.bounds[0])):
KeyError: 0