BEFORE NORMALIZATION:
tensor([[[ 33.0775,  75.7954,  16.5362],
         [ 55.8106,  39.6977,  41.5371],
         [ 25.2581,  23.4486,  53.8410],
         ...,
         [ 70.6147, 102.1811,  23.0597],
         [ 16.0922,  13.1206,  27.8584],
         [ 41.8635, 121.2755,  72.9179]],
        [[ 13.0476,  19.0343,  10.7561],
         [ 42.2385,  30.1410,  25.0476],
         [ 17.1123,  10.7295,  33.9849],
         ...,
         [ 57.8135,  32.4906,  12.7067],
         [ 12.1526,  11.1672,  15.2660],
         [ 38.0955,  49.0875,  58.3668]],
        [[ 11.6284,  16.0417,  10.1984],
         [ 40.8065,  29.1307,  23.5274],
         [ 16.3071,   9.7398,  32.1033],
         ...,
         [ 56.3996,  28.1942,  11.8031],
         [ 11.7374,  10.9466,  14.1706],
         [ 37.6533,  43.8881,  56.7806]],
        ...,
        [[ 10.0796,  12.9731,   9.5463],
         [ 39.0964,  27.9237,  21.7682],
         [ 15.3602,   8.6373,  29.9121],
         ...,
         [ 54.6927,  23.6430,  10.7703],
         [ 11.2418,  10.6788,  12.9197],
         [ 37.1116,  38.1939,  54.8715]],
        [[ 14.5111,  22.2905,  11.2980],
         [ 43.6052,  31.1048,  26.5382],
         [ 17.8910,  11.7323,  35.8199],
         ...,
         [ 59.1503,  37.0364,  13.6023],
         [ 12.5489,  11.3749,  16.3524],
         [ 38.5084,  54.4331,  59.8707]],
        [[ 18.3480,  31.5836,  12.5923],
         [ 46.7795,  33.3419,  30.1488],
         [ 19.7368,  14.2893,  40.2271],
         ...,
         [ 62.2105,  49.4450,  15.8083],
         [ 13.4697,  11.8468,  19.0310],
         [ 39.4353,  68.3793,  63.3276]]], device='cuda:0',
       dtype=torch.float64)
Traceback (most recent call last):
  File "/home/abdelmajid/workdir/cost-aware-bo/main.py", line 61, in <module>
    bo_trial(trial_number=trial, acqf=args.acqf, wandb=wandb, params=params)
  File "/home/abdelmajid/workdir/cost-aware-bo/single_trial.py", line 62, in bo_trial
    new_x, n_memoised, E_c, E_inv_c, y_pred = bo_iteration(X, Y, C, bounds=bounds, acqf_str=acqf, decay=eta, iter=iteration, params=params)
  File "/home/abdelmajid/workdir/cost-aware-bo/single_iteration.py", line 72, in bo_iteration
    new_x, n_memoised = optimize_acqf_by_mem(acqf=acqf, acqf_str=acqf_str, bounds=norm_bounds, iter=iter, prefix_pool=prefix_pool, seed=params['rand_seed'])
  File "/home/abdelmajid/workdir/cost-aware-bo/optimize_mem_acqf.py", line 26, in optimize_acqf_by_mem
    new_candidate, acqf_val = optimize_acqf(acq_function=acqf, acq_type=acqf_str, delta=pref_stages, curr_iter=iter, bounds=bounds, q=1, num_restarts=10, raw_samples=512, options={'seed': seed})
  File "/home/abdelmajid/workdir/cost-aware-bo/optimizer/optimize_acqf_funcs.py", line 401, in optimize_acqf
    return _optimize_acqf(opt_acqf_inputs)
  File "/home/abdelmajid/miniconda3/envs/tuun/lib/python3.10/site-packages/botorch/optim/optimize.py", line 554, in _optimize_acqf
    return _optimize_acqf_batch(
  File "/home/abdelmajid/workdir/cost-aware-bo/optimizer/optimize_acqf_funcs.py", line 414, in _optimize_acqf_batch
    batch_initial_conditions = opt_inputs.get_ic_generator()(
  File "/home/abdelmajid/workdir/cost-aware-bo/optimizer/optimize_acqf_funcs.py", line 221, in gen_batch_initial_conditions
    ).cpu() if 'EIPU' not in acq_type else acq_function(
  File "/home/abdelmajid/miniconda3/envs/tuun/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/abdelmajid/miniconda3/envs/tuun/lib/python3.10/site-packages/botorch/utils/transforms.py", line 287, in decorated
    output = method(acqf, X, *args, **kwargs)
  File "/home/abdelmajid/workdir/cost-aware-bo/EEIPU/EIPUVariants.py", line 153, in forward
    inv_cost =  self.compute_expected_inverse_cost(X, delta=delta)
  File "/home/abdelmajid/workdir/cost-aware-bo/EEIPU/EIPUVariants.py", line 100, in compute_expected_inverse_cost
    cat_stages = self.cost_normalizer(cat_stages, self.bounds['c_cube'])
  File "/home/abdelmajid/workdir/cost-aware-bo/functions.py", line 56, in normalize_cost
    mn, mx = bounds[0][stage].item(), bounds[1][stage].item()
IndexError: index 3 is out of bounds for dimension 0 with size 3